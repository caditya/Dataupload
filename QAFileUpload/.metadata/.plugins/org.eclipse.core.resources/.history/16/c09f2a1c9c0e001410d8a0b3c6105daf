package com.follett.connector.service;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.follett.connector.util.DataBlock;
import com.follett.connector.util.StatusBean;

@Component
public class ConnectorServiceImpl implements ConnectorService {

	private static final Logger logger = LoggerFactory
			.getLogger(ConnectorServiceImpl.class);
	
	@Value("${datafiledestination}")
	private String dataFileDestination;
	@Value("${startfiledestination}")
	private String startFileDestination;
	@Value("${datafilesource}")
	private String dataFileSource;
	@Value("${startfilesource}")
	private String startFileSource;
	@Value("${startfilename}")
	private String startFileName;
	@Value("${filecheckinterval}")
	private int fileCheckInterval;
	@Value("${status.success.filedeleted}")
	private int statusSucFileDel;

	
	
	private boolean preserve = true;
	private boolean overwrite = true;

	@Override
	/**
	 * Move files to server locations.
	 * Keep checking every 30 seconds to find if files have been taken out.
	 * Report back if files are gone.
	 * If files are not gone after 5 minutes, report back an error.
	 */
	public StatusBean uploadData(DataBlock dataBlock) {
		StatusBean fileTransferStatus = copyFile(dataBlock.getFileName(),dataFileSource, dataFileDestination); 
		if(fileTransferStatus.getErrorCode() >=0){
			fileTransferStatus = copyFile(startFileName, startFileSource, startFileDestination);
			
			
			
			if(fileTransferStatus.getErrorCode()>=0){
				System.out.println("Check -1 ");
				// Check if files picked up.
				//
				fileTransferStatus = this.runNTimes();
				System.out.println("Check -2 ");
			}
		}
		
		return fileTransferStatus;
	}
	
	private StatusBean runNTimes(){
		StatusBean statusBean = new StatusBean();
		int counter  = 5; 
		try {
			Thread.sleep(10000);
			for(;counter>0;counter--){
				if(!new File(startFileDestination+ "/" + startFileName).exists()){
					statusBean.setErrorCode(statusSucFileDel);
				}
        		 
        	}
			
			
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	/*
	public StatusBean runNTimes( int maxRunCount, long period, TimeUnit unit, ScheduledExecutorService executor) {
        
		
		FixedExecutionRunnable runnable  = new FixedExecutionRunnable(maxRunCount);
		return runnable.runNTimes(period, unit, executor);
    }

    class FixedExecutionRunnable implements Runnable {
        private final AtomicInteger runCount = new AtomicInteger();
        private final Runnable delegate;
        private volatile ScheduledFuture<?> self;
        private final int maxRunCount;
        private final StatusBean statusBean = new StatusBean();

        public FixedExecutionRunnable( int maxRunCount) {
        	Runnable fileCheck = new Runnable() {
                public void run() {
                	logger.info("Checking if files deleted.");
                	if(!new File(startFileDestination+ "/" + startFileName).exists()){
                		statusBean.setErrorCode(statusSucFileDel);
                		 
                	}
                	
                }
            };
            this.delegate = fileCheck;
            this.maxRunCount = maxRunCount;
        }

        public void run() {
            delegate.run();
            if(statusBean.getErrorCode()==statusSucFileDel) { // if success, stop further process.
                self.cancel(false);
            }
        }

        public StatusBean runNTimes(long period, TimeUnit unit, ScheduledExecutorService executor) {
            self = executor.scheduleAtFixedRate(this, 0, period, unit);
            return statusBean;
        }
    }
	
	
	
	
	
	
	
	/*
	
	private StatusBean dummyConfirmFilesPicked() {
		try {
			synchronized (this) {
				this.wait(1000);
			}
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return new StatusBean();
		
	}
	private StatusBean confirmFilesPicked() {
		final StatusBean statusBean = new StatusBean();
		final ScheduledExecutorService scheduler =
			       Executors.newScheduledThreadPool(1);
		
		final Runnable fileCheck = new Runnable() {
                public void run() {
                	logger.info("Checking if files deleted.");
                	if(!new File(startFileDestination+ "/" + startFileName).exists()){
                		statusBean.setErrorCode(statusSucFileDel);
                		 
                	}
                	
                }
            };
        final ScheduledFuture<?> fileCheckHandler =
            scheduler.scheduleAtFixedRate(fileCheck, fileCheckInterval, fileCheckInterval, java.util.concurrent.TimeUnit.SECONDS);
        Runnable runnable = new Runnable() {
            public void run() 
            { 
            	fileCheckHandler.cancel(true); 
            } 
        };
        
        scheduler.schedule(runnable, 300, java.util.concurrent.TimeUnit.SECONDS);
		return new StatusBean();
		
	}
	
	*/
	
	
	
	
	
	
	
	

	private StatusBean copyFile(String fileName, String source, String dest){
		try{	
			FileUtils.copyFile(new File(source + "/"+ fileName), new File(dest + "/"+ fileName));
		}
		catch( IOException exception){
			exception.printStackTrace();
			StatusBean errorBean = new StatusBean();
			errorBean.setErrorCode(-1);
			errorBean.setErrorMessage(exception.getMessage());
			return errorBean;
	}
	return new StatusBean();

}


}
